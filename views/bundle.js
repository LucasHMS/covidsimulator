/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/index.ts");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./src/Entity.ts":
/*!***********************!*\
  !*** ./src/Entity.ts ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nexports.__esModule = true;\nvar Vector_1 = __webpack_require__(/*! ./Vector */ \"./src/Vector.ts\");\nvar Entity = /** @class */ (function () {\n    function Entity(id, isInfected, isSocialDistancing, isMobile, confinedArea, areaOfInfluence, entitySize) {\n        this.id = id;\n        this.isInfected = isInfected;\n        this.isCured = false;\n        this.isDead = false;\n        this.isSocialDistancing = isSocialDistancing;\n        this.isMobile = isMobile;\n        this.confinedArea = confinedArea;\n        this.areaOfInfluence = areaOfInfluence;\n        this.entitySize = entitySize;\n        this.infectionDuration = 0;\n        var randomMovimentX = Math.floor(Math.random() * (10 - 5)) + 1;\n        var randomMovimentY = Math.floor(Math.random() * (10 - 5)) + 1;\n        this.moviment = new Vector_1.Vector(randomMovimentX, randomMovimentY);\n        var randomPositionX = Math.floor(Math.random() * (this.confinedArea - this.entitySize - 5)) + 1;\n        var randomPositionY = Math.floor(Math.random() * (this.confinedArea - this.entitySize - 5)) + 1;\n        this.position = new Vector_1.Vector(randomPositionX, randomPositionY);\n        this.acceleration = new Vector_1.Vector(0, 0);\n    }\n    Entity.prototype.updatePosition = function () {\n        this.bounce();\n        this.position.add(this.moviment);\n        this.moviment.add(this.acceleration);\n        this.acceleration.setX(0);\n        this.acceleration.setY(0);\n    };\n    Entity.prototype.wrapArround = function () {\n        if (this.position.getX() - this.entitySize > this.confinedArea) {\n            this.position.setX(1 + this.entitySize);\n        }\n        if (this.position.getY() - this.entitySize > this.confinedArea) {\n            this.position.setY(1 + this.entitySize);\n        }\n        if (this.position.getX() + this.entitySize < 0) {\n            this.position.setX(this.confinedArea - 1 - this.entitySize);\n        }\n        if (this.position.getY() + this.entitySize < 0) {\n            this.position.setY(this.confinedArea - 1 - this.entitySize);\n        }\n    };\n    Entity.prototype.bounce = function () {\n        if (this.position.getX() + this.moviment.getX() >= this.confinedArea - this.entitySize || this.position.getX() + this.moviment.getX() <= this.entitySize) {\n            this.moviment.setX(-this.moviment.getX());\n        }\n        if (this.position.getY() + this.moviment.getY() >= this.confinedArea - this.entitySize || this.position.getY() + this.moviment.getY() <= this.entitySize) {\n            this.moviment.setY(-this.moviment.getY());\n        }\n    };\n    Entity.prototype.getDestrucedPosition = function () {\n        return [this.position.getX, this.position.getY];\n    };\n    return Entity;\n}());\nexports.Entity = Entity;\n\n\n//# sourceURL=webpack:///./src/Entity.ts?");

/***/ }),

/***/ "./src/Simulator.ts":
/*!**************************!*\
  !*** ./src/Simulator.ts ***!
  \**************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nexports.__esModule = true;\nvar Entity_1 = __webpack_require__(/*! ./Entity */ \"./src/Entity.ts\");\nvar Vector_1 = __webpack_require__(/*! ./Vector */ \"./src/Vector.ts\");\nvar Simulator = /** @class */ (function () {\n    function Simulator(entityLimit, initialInfected, hospitalCapacity, infectionRate, recoveringRate, timeToCure, socialDistancingRate, mobilityRate, confinedArea, areaOfInfluence, entitySize) {\n        this.entityLimit = entityLimit;\n        this.initialInfected = initialInfected;\n        this.hospitalCapacity = hospitalCapacity;\n        this.infectionRate = infectionRate;\n        this.recoveringRate = recoveringRate;\n        this.timeToCure = Math.floor(Math.random() * (timeToCure * 2 - timeToCure)) + 1;\n        ;\n        this.socialDistancingRate = socialDistancingRate;\n        this.mobilityRate = mobilityRate;\n        this.confinedArea = confinedArea;\n        this.areaOfInfluence = areaOfInfluence;\n        this.entitySize = entitySize;\n        this.infectedCount = 0;\n        this.hospitalizedCount = 0;\n        this.curedCount = 0;\n        this.deadCount = 0;\n        this.startEntities();\n    }\n    Simulator.prototype.startEntities = function () {\n        this.entities = new Array();\n        var randomValue = 0;\n        for (var i = 0; i < this.entityLimit; i++) {\n            var infected = false;\n            if (this.infectedCount < this.initialInfected) {\n                infected = true;\n                this.infectedCount++;\n            }\n            var mobility = false;\n            randomValue = Math.floor(Math.random() * (100)) + 1;\n            mobility = randomValue <= this.mobilityRate;\n            var socialDistancing = false;\n            randomValue = Math.floor(Math.random() * (100)) + 1;\n            socialDistancing = randomValue <= this.socialDistancingRate;\n            this.entities.push(new Entity_1.Entity(i, infected, socialDistancing, mobility, this.confinedArea, this.areaOfInfluence, this.entitySize));\n        }\n    };\n    Simulator.prototype.tick = function () {\n        for (var _i = 0, _a = this.entities; _i < _a.length; _i++) {\n            var entity = _a[_i];\n            // moviment updates\n            if (entity.isMobile) {\n                if (entity.isSocialDistancing) {\n                    for (var _b = 0, _c = this.entities; _b < _c.length; _b++) {\n                        var otherEntity = _c[_b];\n                        if (entity.id === otherEntity.id) {\n                            continue;\n                        }\n                        if ((entity.position.distanceTo(otherEntity.position)) <= ((this.areaOfInfluence + (this.entitySize * 2)) + 1)) {\n                            var repulsion = new Vector_1.Vector(entity.position.getX() - otherEntity.position.getX(), entity.position.getY() - otherEntity.position.getY());\n                            // repulsion.scale(0.025);\n                            entity.acceleration.add(repulsion);\n                        }\n                    }\n                }\n                entity.updatePosition();\n            }\n            entity.moviment.limit(5);\n            // infection updates\n            if (entity.isInfected) {\n                for (var _d = 0, _e = this.entities; _d < _e.length; _d++) {\n                    var otherEntity = _e[_d];\n                    if (entity.id === otherEntity.id) {\n                        continue;\n                    }\n                    if (otherEntity.isDead || otherEntity.isCured || otherEntity.isInfected) {\n                        continue;\n                    }\n                    if (entity.position.distanceTo(otherEntity.position) < ((this.areaOfInfluence + (this.entitySize * 2)) + 1)) {\n                        var chance = Math.floor(Math.random() * (100)) + 1;\n                        if (chance <= this.infectionRate) {\n                            otherEntity.isInfected = true;\n                            this.infectedCount++;\n                        }\n                    }\n                }\n                entity.infectionDuration++;\n                if (entity.infectionDuration >= this.timeToCure) {\n                    var chance = Math.floor(Math.random() * (100)) + 1;\n                    if (chance <= this.recoveringRate) {\n                        entity.isCured = true;\n                        entity.isInfected = false;\n                        this.infectedCount--;\n                        this.curedCount++;\n                    }\n                    else {\n                        entity.isDead = true;\n                        entity.isInfected = false;\n                        entity.isMobile = false;\n                        this.infectedCount--;\n                        this.deadCount++;\n                    }\n                }\n            }\n        }\n    };\n    return Simulator;\n}());\nexports.Simulator = Simulator;\n\n\n//# sourceURL=webpack:///./src/Simulator.ts?");

/***/ }),

/***/ "./src/Vector.ts":
/*!***********************!*\
  !*** ./src/Vector.ts ***!
  \***********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nexports.__esModule = true;\nvar Vector = /** @class */ (function () {\n    function Vector(x, y) {\n        this.x = x;\n        this.y = y;\n    }\n    Vector.prototype.add = function (b) {\n        this.x += b.x;\n        this.y += b.y;\n    };\n    Vector.prototype.scale = function (scale) {\n        this.x *= scale;\n        this.y *= scale;\n    };\n    Vector.prototype.distanceTo = function (b) {\n        return Math.sqrt(Math.pow((this.x - b.x), 2) + Math.pow((this.y - b.y), 2));\n    };\n    Vector.prototype.limit = function (limit) {\n        if (limit === void 0) { limit = 1; }\n        if (this.getMagnitude() > limit) {\n            this.normalize();\n            this.scale(limit);\n        }\n    };\n    Vector.prototype.normalize = function () {\n        var magnitude = this.getMagnitude();\n        this.scale(1 / magnitude);\n    };\n    Vector.prototype.getMagnitude = function () {\n        return Math.sqrt(Math.pow(this.x, 2) + Math.pow(this.y, 2));\n    };\n    Vector.prototype.getX = function () {\n        return this.x;\n    };\n    Vector.prototype.getY = function () {\n        return this.y;\n    };\n    Vector.prototype.setX = function (x) {\n        this.x = x;\n    };\n    Vector.prototype.setY = function (y) {\n        this.y = y;\n    };\n    return Vector;\n}());\nexports.Vector = Vector;\n\n\n//# sourceURL=webpack:///./src/Vector.ts?");

/***/ }),

/***/ "./src/index.ts":
/*!**********************!*\
  !*** ./src/index.ts ***!
  \**********************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nexports.__esModule = true;\nvar Simulator_1 = __webpack_require__(/*! ./Simulator */ \"./src/Simulator.ts\");\nvar tickLimit, entityLimit, initialInfected, hospitalCapacity, infectionRate, recoveringRate, timeToCure, socialDistancingRate, mobilityRate, confinedArea, areaOfInfluence, entitySize, maxNoChangeTicks;\nvar showInfluenceArea = false;\nvar showId = false;\nvar currSleep = 0;\nvar getFieldValues = function () {\n    tickLimit = parseInt(document.getElementById(\"tickLimit\").value);\n    entityLimit = parseInt(document.getElementById(\"entityLimit\").value);\n    initialInfected = parseInt(document.getElementById(\"initialInfected\").value);\n    hospitalCapacity = parseInt(document.getElementById(\"hospitalCapacity\").value);\n    infectionRate = parseInt(document.getElementById(\"infectionRate\").value);\n    recoveringRate = parseInt(document.getElementById(\"recoveringRate\").value);\n    timeToCure = parseInt(document.getElementById(\"timeToCure\").value);\n    socialDistancingRate = parseInt(document.getElementById(\"socialDistancingRate\").value);\n    mobilityRate = parseInt(document.getElementById(\"mobilityRate\").value);\n    confinedArea = parseInt(document.getElementById(\"confinedArea\").value);\n    areaOfInfluence = parseInt(document.getElementById(\"areaOfInfluence\").value);\n    entitySize = parseInt(document.getElementById(\"entitySize\").value);\n    maxNoChangeTicks = parseInt(document.getElementById(\"maxNoChangeTicks\").value);\n    showId = document.getElementById(\"showId\").checked;\n    showInfluenceArea = document.getElementById(\"showInfluenceArea\").checked;\n};\n// defaults\nvar setDefaults = function (data) {\n    var defaultConfig = {\n        tickLimit: '1000',\n        entityLimit: '50',\n        initialInfected: '5',\n        hospitalCapacity: '10',\n        infectionRate: '80',\n        recoveringRate: '20',\n        timeToCure: '100',\n        socialDistancingRate: '50',\n        mobilityRate: '75',\n        confinedArea: '800',\n        areaOfInfluence: '7',\n        entitySize: '2',\n        maxNoChangeTicks: '200',\n        currSleep: '0',\n        showId: false,\n        showInfluenceArea: false\n    };\n    if (data) {\n        defaultConfig = Object.assign({}, data);\n    }\n    document.getElementById(\"tickLimit\").value = defaultConfig.tickLimit;\n    document.getElementById(\"entityLimit\").value = defaultConfig.entityLimit;\n    document.getElementById(\"initialInfected\").value = defaultConfig.initialInfected;\n    document.getElementById(\"hospitalCapacity\").value = defaultConfig.hospitalCapacity;\n    document.getElementById(\"infectionRate\").value = defaultConfig.infectionRate;\n    document.getElementById(\"recoveringRate\").value = defaultConfig.recoveringRate;\n    document.getElementById(\"timeToCure\").value = defaultConfig.timeToCure;\n    document.getElementById(\"socialDistancingRate\").value = defaultConfig.socialDistancingRate;\n    document.getElementById(\"mobilityRate\").value = defaultConfig.mobilityRate;\n    document.getElementById(\"confinedArea\").value = defaultConfig.confinedArea;\n    document.getElementById(\"areaOfInfluence\").value = defaultConfig.areaOfInfluence;\n    document.getElementById(\"entitySize\").value = defaultConfig.entitySize;\n    document.getElementById(\"maxNoChangeTicks\").value = defaultConfig.maxNoChangeTicks;\n    document.getElementById(\"sleep\").value = defaultConfig.currSleep;\n    document.getElementById(\"currSleep\").textContent = defaultConfig.currSleep;\n    document.getElementById(\"showId\").checked = defaultConfig.showId;\n    document.getElementById(\"showInfluenceArea\").checked = defaultConfig.showInfluenceArea;\n    showId = document.getElementById(\"showId\").checked;\n    showInfluenceArea = document.getElementById(\"showInfluenceArea\").checked;\n    document.getElementById(\"showInfluenceArea\").addEventListener('mouseup', function () {\n        showInfluenceArea = !showInfluenceArea;\n    });\n    document.getElementById(\"showId\").addEventListener('mouseup', function () {\n        showId = !showId;\n    });\n    currSleep = parseInt(defaultConfig.currSleep);\n    document.getElementById(\"sleep\").addEventListener('mouseup', function () {\n        currSleep = parseInt(document.getElementById(\"sleep\").value);\n        document.getElementById(\"currSleep\").textContent = \"\" + currSleep;\n    });\n};\nvar reDrawEntities = function (ctx, covidSimulator) {\n    drawCanvas(ctx);\n    for (var _i = 0, _a = covidSimulator.entities; _i < _a.length; _i++) {\n        var entity = _a[_i];\n        drawPoint(entity, ctx);\n    }\n};\nvar drawEntitesFromLocalStorage = function (ctx, entities) {\n    getFieldValues();\n    drawCanvas(ctx);\n    for (var _i = 0, entities_1 = entities; _i < entities_1.length; _i++) {\n        var entity = entities_1[_i];\n        ctx.beginPath();\n        var status_1 = {\n            isDead: entity.isDead,\n            isInfected: entity.isInfected,\n            isCured: entity.isCured,\n            isSocialDistancing: entity.isSocialDistancing\n        };\n        ctx.fillStyle = getColor(status_1);\n        ctx.arc(entity.position.x, entity.position.y, entitySize, 0, 2 * Math.PI);\n        ctx.fill();\n        if (showId) {\n            ctx.font = \"20px\";\n            ctx.fillText(\"\" + entity.id, entity.position.x + 10, entity.position.y);\n        }\n        if (showInfluenceArea) {\n            drawInfluenceArea(entity.position.x, entity.position.y, ctx);\n        }\n    }\n};\nvar drawCanvas = function (ctx) {\n    ctx.clearRect(0, 0, confinedArea, confinedArea);\n    ctx.fillStyle = 'black';\n    ctx.beginPath();\n    ctx.fillRect(0, 0, confinedArea, confinedArea);\n    ctx.stroke();\n};\nvar drawPoint = function (entity, ctx) {\n    ctx.beginPath();\n    ctx.fillStyle = getColor(entity);\n    ctx.arc(entity.position.getX(), entity.position.getY(), entitySize, 0, 2 * Math.PI);\n    ctx.fill();\n    if (showId) {\n        ctx.font = \"20px\";\n        ctx.fillText(\"\" + entity.id, entity.position.getX() + entitySize + 1, entity.position.getY());\n    }\n    if (showInfluenceArea) {\n        drawInfluenceArea(entity.position.getX(), entity.position.getY(), ctx);\n    }\n};\nvar drawInfluenceArea = function (x, y, ctx) {\n    ctx.save();\n    ctx.globalAlpha = 0.2;\n    ctx.beginPath();\n    ctx.fillStyle = 'white';\n    ctx.arc(x, y, areaOfInfluence + entitySize, 0, 2 * Math.PI);\n    ctx.fill();\n    ctx.restore();\n};\nvar getColor = function (_a) {\n    var isDead = _a.isDead, isInfected = _a.isInfected, isCured = _a.isCured, isSocialDistancing = _a.isSocialDistancing;\n    if (isDead) {\n        return '#ded81c';\n    }\n    if (isInfected) {\n        return '#ff3c00';\n    }\n    if (isCured) {\n        return '#1c83de';\n    }\n    if (isSocialDistancing) {\n        return '#22de1c';\n    }\n    return '#9e5cea';\n};\nvar updateCounts = function (covidSimulator) {\n    document.getElementById(\"numDead\").textContent = \"\" + covidSimulator.deadCount;\n    document.getElementById(\"numInfected\").textContent = \"\" + covidSimulator.infectedCount;\n    document.getElementById(\"numCured\").textContent = \"\" + covidSimulator.curedCount;\n};\nvar startPloter = function (data) {\n    function touchZoomPlugin(opts) {\n        function init(u, opts, data) {\n            var plot = u.root.querySelector(\".over\");\n            var rect, oxRange, oyRange, xVal, yVal;\n            var fr = { x: 0, y: 0, dx: 0, dy: 0 };\n            var to = { x: 0, y: 0, dx: 0, dy: 0 };\n            function storePos(t, e) {\n                var ts = e.touches;\n                var t0 = ts[0];\n                var t0x = t0.clientX - rect.left;\n                var t0y = t0.clientY - rect.top;\n                if (ts.length == 1) {\n                    t.x = t0x;\n                    t.y = t0y;\n                    t.d = 0;\n                }\n                else {\n                    var t1 = e.touches[1];\n                    var t1x = t1.clientX - rect.left;\n                    var t1y = t1.clientY - rect.top;\n                    var xMin = Math.min(t0x, t1x);\n                    var yMin = Math.min(t0y, t1y);\n                    var xMax = Math.max(t0x, t1x);\n                    var yMax = Math.max(t0y, t1y);\n                    // midpts\n                    t.y = (yMin + yMax) / 2;\n                    t.x = (xMin + xMax) / 2;\n                    t.dx = xMax - xMin;\n                    t.dy = yMax - yMin;\n                    // dist\n                    t.d = Math.sqrt(t.dx * t.dx + t.dy * t.dy);\n                }\n            }\n            var rafPending = false;\n            function zoom() {\n                rafPending = false;\n                var left = to.x;\n                var top = to.y;\n                // non-uniform scaling\n                //\tlet xFactor = fr.dx / to.dx;\n                //\tlet yFactor = fr.dy / to.dy;\n                // uniform x/y scaling\n                var xFactor = fr.dx / to.dx;\n                var yFactor = fr.dy / to.dy;\n                var leftPct = left / rect.width;\n                var btmPct = 1 - top / rect.height;\n                var nxRange = oxRange * xFactor;\n                var nxMin = xVal - leftPct * nxRange;\n                var nxMax = nxMin + nxRange;\n                var nyRange = oyRange * yFactor;\n                var nyMin = yVal - btmPct * nyRange;\n                var nyMax = nyMin + nyRange;\n                u.batch(function () {\n                    u.setScale(\"x\", {\n                        min: nxMin,\n                        max: nxMax,\n                    });\n                    u.setScale(\"y\", {\n                        min: nyMin,\n                        max: nyMax,\n                    });\n                });\n            }\n            function touchmove(e) {\n                storePos(to, e);\n                if (!rafPending) {\n                    rafPending = true;\n                    requestAnimationFrame(zoom);\n                }\n            }\n            plot.addEventListener(\"touchstart\", function (e) {\n                rect = plot.getBoundingClientRect();\n                storePos(fr, e);\n                oxRange = u.scales.x.max - u.scales.x.min;\n                oyRange = u.scales.y.max - u.scales.y.min;\n                var left = fr.x;\n                var top = fr.y;\n                xVal = u.posToVal(left, \"x\");\n                yVal = u.posToVal(top, \"y\");\n                document.addEventListener(\"touchmove\", touchmove, { passive: true });\n            });\n            plot.addEventListener(\"touchend\", function (e) {\n                document.removeEventListener(\"touchmove\", touchmove);\n            });\n        }\n        return {\n            hooks: {\n                init: init\n            }\n        };\n    }\n    var plots = document.getElementsByClassName('uplot');\n    if (plots) {\n        for (var i = 0; i < plots.length; i++) {\n            plots.item(i).remove();\n        }\n    }\n    var opts = {\n        width: 1500,\n        height: 600,\n        title: \"Area Fill\",\n        plugins: [\n            touchZoomPlugin()\n        ],\n        scales: {\n            x: {\n                time: false,\n                label: \"Tick\"\n            },\n        },\n        series: [\n            {},\n            {\n                stroke: \"gray\",\n                fill: \"rgba(222, 216, 28,0.1)\",\n                label: \"Dead\"\n            },\n            {\n                stroke: \"red\",\n                fill: \"rgba(255, 60, 0,0.1)\",\n                label: \"Infected\"\n            },\n            {\n                stroke: \"blue\",\n                fill: \"rgba(28, 131, 222,0.1)\",\n                label: \"Cured\"\n            },\n        ],\n    };\n    var u = new uPlot(opts, data, document.body);\n    return u;\n};\nvar getCanvas = function () {\n    var c = document.getElementById(\"area\");\n    return c.getContext(\"2d\");\n};\nvar sleep = function () { return __awaiter(void 0, void 0, void 0, function () { return __generator(this, function (_a) {\n    return [2 /*return*/, new Promise(function (r) { return setTimeout(r, currSleep); })];\n}); }); };\nvar start = function () { return __awaiter(void 0, void 0, void 0, function () {\n    var ctx, covidSimulator, tickIndex, deadCount, infectedCount, curedCount, plotter, i;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                document.getElementById(\"start\").disabled = true;\n                ctx = getCanvas();\n                getFieldValues();\n                window.localStorage.setItem('config', JSON.stringify({ tickLimit: tickLimit, entityLimit: entityLimit, initialInfected: initialInfected, hospitalCapacity: hospitalCapacity, infectionRate: infectionRate, recoveringRate: recoveringRate, timeToCure: timeToCure, socialDistancingRate: socialDistancingRate, mobilityRate: mobilityRate, confinedArea: confinedArea, areaOfInfluence: areaOfInfluence, currSleep: currSleep, entitySize: entitySize, maxNoChangeTicks: maxNoChangeTicks, showId: showId, showInfluenceArea: showInfluenceArea }));\n                covidSimulator = new Simulator_1.Simulator(entityLimit, initialInfected, hospitalCapacity, infectionRate, recoveringRate, timeToCure, socialDistancingRate, mobilityRate, confinedArea, areaOfInfluence, entitySize);\n                tickIndex = [];\n                deadCount = [];\n                infectedCount = [];\n                curedCount = [];\n                plotter = startPloter([tickIndex, deadCount, infectedCount, curedCount]);\n                i = 0;\n                i = 0;\n                _a.label = 1;\n            case 1:\n                if (!(i < tickLimit)) return [3 /*break*/, 4];\n                covidSimulator.tick();\n                reDrawEntities(ctx, covidSimulator);\n                updateCounts(covidSimulator);\n                tickIndex.push(i + 1);\n                deadCount.push(covidSimulator.deadCount);\n                infectedCount.push(covidSimulator.infectedCount);\n                curedCount.push(covidSimulator.curedCount);\n                plotter.setData([tickIndex, deadCount, infectedCount, curedCount]);\n                window.localStorage.setItem('counts', JSON.stringify([tickIndex, deadCount, infectedCount, curedCount]));\n                window.localStorage.setItem('simulator', JSON.stringify(covidSimulator.entities));\n                return [4 /*yield*/, sleep()];\n            case 2:\n                _a.sent();\n                _a.label = 3;\n            case 3:\n                i++;\n                return [3 /*break*/, 1];\n            case 4: return [2 /*return*/];\n        }\n    });\n}); };\nvar restart = function () {\n    getFieldValues();\n    window.localStorage.setItem('config', JSON.stringify({ tickLimit: tickLimit, entityLimit: entityLimit, initialInfected: initialInfected, hospitalCapacity: hospitalCapacity, infectionRate: infectionRate, recoveringRate: recoveringRate, timeToCure: timeToCure, socialDistancingRate: socialDistancingRate, mobilityRate: mobilityRate, confinedArea: confinedArea, areaOfInfluence: areaOfInfluence, currSleep: currSleep, entitySize: entitySize, maxNoChangeTicks: maxNoChangeTicks, showId: showId, showInfluenceArea: showInfluenceArea }));\n    var data = JSON.parse(window.localStorage.getItem('config'));\n    data.execute = true;\n    data.stoped = false;\n    window.localStorage.setItem('config', JSON.stringify(data));\n    window.location.reload(false);\n};\nvar stop = function () {\n    getFieldValues();\n    window.localStorage.setItem('config', JSON.stringify({ tickLimit: tickLimit, entityLimit: entityLimit, initialInfected: initialInfected, hospitalCapacity: hospitalCapacity, infectionRate: infectionRate, recoveringRate: recoveringRate, timeToCure: timeToCure, socialDistancingRate: socialDistancingRate, mobilityRate: mobilityRate, confinedArea: confinedArea, areaOfInfluence: areaOfInfluence, currSleep: currSleep, entitySize: entitySize, maxNoChangeTicks: maxNoChangeTicks, showId: showId, showInfluenceArea: showInfluenceArea }));\n    var data = JSON.parse(window.localStorage.getItem('config'));\n    data.execute = false;\n    data.stoped = true;\n    window.localStorage.setItem('config', JSON.stringify(data));\n    window.location.reload(false);\n};\nfunction run() {\n    document.getElementById(\"start\").addEventListener('mouseup', start);\n    document.getElementById(\"restart\").addEventListener('mouseup', restart);\n    document.getElementById(\"stop\").addEventListener('mouseup', stop);\n    var data = JSON.parse(window.localStorage.getItem('config'));\n    if (!data) {\n        setDefaults();\n    }\n    else {\n        setDefaults(data);\n        data.execute ? start() : null;\n        if (data.stoped) {\n            var ctx = getCanvas();\n            var entities = JSON.parse(window.localStorage.getItem('simulator'));\n            drawEntitesFromLocalStorage(ctx, entities);\n            startPloter(JSON.parse(window.localStorage.getItem('counts')));\n        }\n    }\n}\nwindow.onload = run;\n\n\n//# sourceURL=webpack:///./src/index.ts?");

/***/ })

/******/ });